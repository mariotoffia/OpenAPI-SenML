openapi: 3.0.1
info:
  title: Example 01 for SenML Open API 3.x Specification
  description: |
    This sample demonstrates how to use the SenML as simple rest API to get sensor data and actuate.
    Please consult the [RFC 8428](https://tools.ietf.org/html/rfc8428) for SenML detail.

  termsOfService: https://github.com/mariotoffia/OpenAPI-SenML/blob/master/LICENSE
  contact:
    email: nomail@hobbe.net
  license:
    name: Apache 2.0
    url: https://github.com/mariotoffia/OpenAPI-SenML/blob/master/LICENSE
  version: 1.0.0
externalDocs:
  description: Find out more about SenML [RFC 8428](https://tools.ietf.org/html/rfc8428)
  url: https://tools.ietf.org/html/rfc8428
tags:
- name: operational
  description: SenML operational data
  externalDocs:
    description: RFC 8428
    url: https://tools.ietf.org/html/rfc8428
paths:
  /operational:
      get:
        tags:
          - operational
        summary: Gets SenML formatted data
        description: Gets a set of sensor data. If the data is not available or caller do not have the permission,
          it will be automatically filtered out in the result set. However, if all are filtered out a 404 HTTP error
          code is returned.
        operationId: getOperationalData
        requestBody:
          description: 'The sensors to get the data from e.g retrieving voltage, fanspeed, and power at the same time can look like this:
              <em>
              <ul style="list-style-type:none">
                <li>[{"bn": "urn:dev:ow:10e2073a0108001:", "n": "voltage"}, {"n":"fanspeed"}, {"n":"power"}]</li>
              </ul></em>'
          content:
            application/senml+json:
              schema:
                $ref: '#/components/schemas/SenMLRequestJSON'
            application/senml+xml:
              schema:
                $ref: '#/components/schemas/SenMLRequestXML'
          required: true
        responses:
          200:
            description: 'One or more SenML entries (missing / not authorized are filtered out) e.g.
              <ul style="list-style-type:none">
                <li>[{"bn": "urn:dev:ow:10e2073a0108001:","bt": 1276020076.001, "bu": "A", "bver": 5, "n": "voltage", "u" "V", "v": 120.1},</li>
                <li>{"n": "current", "t": -5, "v": 1.2}, {"n": "current", "t": -4, "v": 1.3},</li>
                <li>{"n": "current", "t": -3, "v": 1.4}, {"n": "current", "t": -2, "v": 1.5},</li>
                <li>{"n": "current", "t": -1, "v": 1.6}, {"n": "current", "t": 0, "v": 1.7}]</li>
              </ul>'
            content:
              application/senml+json:
                schema:
                  $ref: '#/components/schemas/SenMLJSON'
              application/senml+xml:
                schema:
                  $ref: '#/components/schemas/SenMLXML'
          401:
            description: Missing authorization token
            content: {}
          403:
            description: Not allowed to perform this operation
            content: {}
          404:
            description: All sensors & parametres was not found.
            content: {}
      post:
        tags:
          - operational
        summary: Set actuation data.
        description: The operation puts data to actuators.
        operationId: postOperationalData
        requestBody:
          description: 'The actuators and data to set. For power on a device for 60 seconds
            can look like this:
            <ul style="list-style-type:none">
              <li>[{"bn": "urn:dev:ow:10e2073a0108001:",  "n": "power", "vb": true}, </li>
              <li>{"n": "ttl", "v": 60 }]</li>
            </ul>'
          content:
            application/senml+json:
              schema:
                $ref: '#/components/schemas/SenMLJSON'
            application/senml+xml:
              schema:
                $ref: '#/components/schemas/SenMLXML'
          required: true
        responses:
          200:
            description: 'A set of response codes, it is neccesary to go through each entry
              to get the result of the operation. Each indiviudal one may have failed. For the
              above example e.g. this response could be presented:
              
              [{"bn": "urn:dev:ow:10e2073a0108001:",  "n": "power", "v": "200"},
              { "n": "ttl", "v": "403" }].
              
              This means that the power was actuated properly but the caller was not allowed
              to set the `ttl` property and therefore, in this example, the power was set to 
              on but no timeout was set.'
            content:
              application/senml+json:
                schema:
                  $ref: '#/components/schemas/SenMLActuationResponseJSON'
              application/senml+xml:
                schema:
                  $ref: '#/components/schemas/SenMLActuationResponseXML'
          401:
            description: Missing authorization token
            content: {}
          403:
            description: Not allowed to perform this operation
            content: {}
components:
  parameters:
    cc:
      in: header
      name: cc
      example: "23893289shdjdshjk"
      description: A client cookie if asynchronous result.
      schema:
        type: string
  schemas:
    SenMLRequestJSON:
      type: array
      items:
        $ref: '../spec/protocol/senml/request-entry.yaml'
    SenMLRequestXML:
      type: object
      properties:
        senml:
          type: array
          items:
            $ref: '../spec/protocol/senml/request-entry.yaml'
      xml:
        name: senml
        namespace: 'urn:ietf:params:xml:ns:senml'
    SenMLRequestEntry:
      $ref: '../spec/protocol/senml/request-entry.yaml'
    SenMLActuationResponseJSON:
      type: array
      items:
        $ref: '../spec/protocol/senml/senml-actuation-response-entry.yaml'
    SenMLActuationResponseXML:
      type: object
      properties:
        senml:
          type: array
          items:
            $ref: '../spec/protocol/senml/senml-actuation-response-entry.yaml'
      xml:
        name: senml
        namespace: 'urn:ietf:params:xml:ns:senml'
    SenMLActuationResponseEntry:
      $ref: '../spec/protocol/senml/senml-actuation-response-entry.yaml'
    SenMLJSON:
      type: array
      items:
        $ref: '#/components/schemas/SenMLEntry'
    SenMLXML:
      type: object
      properties:
        senml:
          type: array
          items:
            $ref: '#/components/schemas/SenMLEntry'
      xml:
        name: senml
        namespace: 'urn:ietf:params:xml:ns:senml'
    SenMLEntry:
      $ref: '../spec/protocol/senml/senml-entry.yaml'